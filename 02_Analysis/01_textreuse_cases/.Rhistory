library(ggrepel)
# Set seed:
set.seed(12345)
?Rtsne
# Generate the 2-dimenstional reduced embeddings:
tsne <- Rtsne(final, perplexity= 3, pca = FALSE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
custom.col <- c("#D16103",
"#4E84C4",
"#4E84C4",
"#4E84C4",
"#4E84C4",
"#C4961A",
"#C4961A",
"#4E84C4",
"#4E84C4",
"#C4961A",
"#C4961A",
"#C4961A",
"#C4961A",
"#52854C",
"#52854C",
"#52854C",
"#D16103",
"#D16103",
"navyblue",
"navyblue",
"#D16103",
"#52854C",
"#D16103",
"#52854C",
"#C4961A",
"#D16103",
"#52854C")
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
# Generate the 2-dimenstional reduced embeddings:
?Rtsne
tsne <- Rtsne(final, perplexity= 3, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
custom.col <- c("#D16103",
"#4E84C4",
"#4E84C4",
"#4E84C4",
"#4E84C4",
"#C4961A",
"#C4961A",
"#4E84C4",
"#4E84C4",
"#C4961A",
"#C4961A",
"#C4961A",
"#C4961A",
"#52854C",
"#52854C",
"#52854C",
"#D16103",
"#D16103",
"navyblue",
"navyblue",
"#D16103",
"#52854C",
"#D16103",
"#52854C",
"#C4961A",
"#D16103",
"#52854C")
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 6, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 15, pca = FALSE, is_distance = TRUE)
tsne <- Rtsne(final, perplexity= 14, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
tsne <- Rtsne(final, perplexity= 13, pca = FALSE, is_distance = TRUE)
tsne <- Rtsne(final, perplexity= 12, pca = FALSE, is_distance = TRUE)
tsne <- Rtsne(final, perplexity= 11, pca = FALSE, is_distance = TRUE)
tsne <- Rtsne(final, perplexity= 10, pca = FALSE, is_distance = TRUE)
tsne <- Rtsne(final, perplexity= 9, pca = FALSE, is_distance = TRUE)
tsne <- Rtsne(final, perplexity= 8, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 7, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 6, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
# Generate the 2-dimenstional reduced embeddings:
?Rtsne
tsne <- Rtsne(final, perplexity= 6, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 5, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 4, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 4, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 4, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 3, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 2, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 2, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 2, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 2, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 1, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 1, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 1, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 1, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 1, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 1, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 1,5, pca = FALSE, is_distance = TRUE)
tsne <- Rtsne(final, perplexity= 3, pca = FALSE, is_distance = TRUE)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
tsne <- Rtsne(final, perplexity= 3, pca = FALSE, is_distance = TRUE, dims =3)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
plot(tsne)
plot(cluster)
masein <- data.frame(names = rownames(final),
x = cluster$x[,1],
y = cluster$y[,2],
stringsAsFactors = FALSE)
masein <- data.frame(names = rownames(final),
x = cluster$x,
y = cluster$y,
stringsAsFactors = FALSE)
masein <- data.frame(names = rownames(final),
x = cluster$x,
y = cluster$y,
stringsAsFactors = FALSE)
View(cluster)
masein <- data.frame(names = rownames(final),
x = cluster[["data"]][["x"]],
y = cluster[["data"]][["y"]],
stringsAsFactors = FALSE)
ggplot(cluster, aes(x=wt, y=mpg)) + geom_point()
setwd("/Users/kathrindietrich/Desktop/041620MasterThesis/02_Analysis/files")
load("rwmd_glove")
setwd("/Users/kathrindietrich/Desktop/041620MasterThesis/02_Analysis/01_textreuse_cases")
rownames(rwmd_glove) = c("acea", "adts", "aegpl", "avele", "avere", "beuc", "bvrla", "ebb", "engva", "etrma", "etsc", "etuc", "faep", "fanc", "foe_uk", "greenpeace", "jama", "kama", "EUcomm2", "EUcomm1", "rai", "rspb", "smmt", "t_and_e", "uk_aa", "vda", "wwf")
colnames(rwmd_glove) = c("acea", "adts", "aegpl", "avele", "avere", "beuc", "bvrla", "ebb", "engva", "etrma", "etsc", "etuc", "faep", "fanc", "foe_uk", "greenpeace", "jama", "kama", "EUcomm2", "EUcomm1", "rai", "rspb", "smmt", "t_and_e", "uk_aa", "vda", "wwf")
final<-rwmd_glove
masein <- data.frame(names = rownames(final),
x = cluster[["data"]][["x"]],
y = cluster[["data"]][["y"]],
stringsAsFactors = FALSE)
# Compute k-means clustering with k = 2
k2 <- kmeans(final, centers = 4, nstart = 27)
masein <- data.frame(names = rownames(final),
x = cluster[["data"]][["x"]],
y = cluster[["data"]][["y"]],
stringsAsFactors = FALSE)
cluster<-fviz_cluster(k2, data = final)
masein <- data.frame(names = rownames(final),
x = cluster[["data"]][["x"]],
y = cluster[["data"]][["y"]],
stringsAsFactors = FALSE)
ggplot(masein, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
plot(cluster)
ggplot(masein, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=4) +
geom_text_repel()
ggplot(masein, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=4) +
geom_text_repel()+
geom_elliple()
ggplot(masein, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=4) +
geom_text_repel()+
stat_ellipse()
ggplot(masein, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=4) +
geom_text_repel()+
stat_ellipse()
ggplot(masein, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=4) +
geom_text_repel()+
stat_ellipse(aes(x = x, y = y))
ggplot(masein, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=4) +
geom_text_repel()+
stat_ellipse(aes(x = x, y = y, label = names))
ggplot(masein, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=4) +
geom_text_repel()+
stat_ellipse(aes(x = x, y = y, label = names), type = "norm")
# Compute k-means clustering with k = 2
k2 <- kmeans(final, centers = 4, nstart = 27)
cluster<-fviz_cluster(k2, data = final)
plot(cluster)
cluster
masein <- data.frame(names = rownames(final),
x = cluster[["data"]][["x"]],
y = cluster[["data"]][["y"]],
stringsAsFactors = FALSE)
ggplot(masein, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=4) +
geom_text_repel()
setwd("/Users/kathrindietrich/Desktop/041620MasterThesis/02_Analysis/files")
load("rwmd_glove")
setwd("/Users/kathrindietrich/Desktop/041620MasterThesis/02_Analysis/01_textreuse_cases")
rownames(rwmd_glove) = c("acea", "adts", "aegpl", "avele", "avere", "beuc", "bvrla", "ebb", "engva", "etrma", "etsc", "etuc", "faep", "fanc", "foe_uk", "greenpeace", "jama", "kama", "EUcomm2", "EUcomm1", "rai", "rspb", "smmt", "t_and_e", "uk_aa", "vda", "wwf")
colnames(rwmd_glove) = c("acea", "adts", "aegpl", "avele", "avere", "beuc", "bvrla", "ebb", "engva", "etrma", "etsc", "etuc", "faep", "fanc", "foe_uk", "greenpeace", "jama", "kama", "EUcomm2", "EUcomm1", "rai", "rspb", "smmt", "t_and_e", "uk_aa", "vda", "wwf")
final<-rwmd_glove
final <- (t(rwmd_glove) + rwmd_glove)/2
#finding k
set.seed(123)
fviz_nbclust(final, kmeans, method = "wss") #elbow method
fviz_nbclust(final, kmeans, method = "silhouette") #silhouette method
gap_stat <- clusGap(final, FUN = kmeans, nstart = 25, #gap stat method
K.max = 24, B = 50)
print(gap_stat, method = "firstmax")
fviz_gap_stat(gap_stat)
# Compute k-means clustering with k = 2
k2 <- kmeans(final, centers = 3, nstart = 27)
cluster<-fviz_cluster(k2, data = final)
plot(cluster)
cluster
masein <- data.frame(names = rownames(final),
x = cluster[["data"]][["x"]],
y = cluster[["data"]][["y"]],
stringsAsFactors = FALSE)
ggplot(masein, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=4) +
geom_text_repel()
# Compute k-means clustering with k = 2
k2 <- kmeans(final, centers = 3, nstart = 27)
cluster<-fviz_cluster(k2, data = final)
plot(cluster)
cluster
masein <- data.frame(names = rownames(final),
x = cluster[["data"]][["x"]],
y = cluster[["data"]][["y"]],
stringsAsFactors = FALSE)
ggplot(masein, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=4) +
geom_text_repel()
setwd("/Users/kathrindietrich/Desktop/041620MasterThesis/02_Analysis/files")
load("rwmd_glove")
setwd("/Users/kathrindietrich/Desktop/041620MasterThesis/02_Analysis/01_textreuse_cases")
rownames(rwmd_glove) = c("acea", "adts", "aegpl", "avele", "avere", "beuc", "bvrla", "ebb", "engva", "etrma", "etsc", "etuc", "faep", "fanc", "foe_uk", "greenpeace", "jama", "kama", "EUcomm2", "EUcomm1", "rai", "rspb", "smmt", "t_and_e", "uk_aa", "vda", "wwf")
colnames(rwmd_glove) = c("acea", "adts", "aegpl", "avele", "avere", "beuc", "bvrla", "ebb", "engva", "etrma", "etsc", "etuc", "faep", "fanc", "foe_uk", "greenpeace", "jama", "kama", "EUcomm2", "EUcomm1", "rai", "rspb", "smmt", "t_and_e", "uk_aa", "vda", "wwf")
final<-rwmd_glove
#finding k
set.seed(123)
fviz_nbclust(final, kmeans, method = "wss") #elbow method
fviz_nbclust(final, kmeans, method = "silhouette") #silhouette method
gap_stat <- clusGap(final, FUN = kmeans, nstart = 25, #gap stat method
K.max = 24, B = 50)
print(gap_stat, method = "firstmax")
fviz_gap_stat(gap_stat)
# Compute k-means clustering with k = 2
k2 <- kmeans(final, centers = 3, nstart = 27)
# Compute k-means clustering with k = 2
k2 <- kmeans(final, centers = 4, nstart = 27)
cluster<-fviz_cluster(k2, data = final)
plot(cluster)
cluster
masein <- data.frame(names = rownames(final),
x = cluster[["data"]][["x"]],
y = cluster[["data"]][["y"]],
stringsAsFactors = FALSE)
ggplot(masein, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=4) +
geom_text_repel()
setwd("/Users/kathrindietrich/Desktop/041620MasterThesis/02_Analysis/files")
load("rwmd_glove")
setwd("/Users/kathrindietrich/Desktop/041620MasterThesis/02_Analysis/01_textreuse_cases")
library(ggplot2)
library(RColorBrewer)
rownames(rwmd_glove) = c("acea", "adts", "aegpl", "avele", "avere", "beuc", "bvrla", "ebb", "engva", "etrma", "etsc", "etuc", "faep", "fanc", "foe_uk", "greenpeace", "jama", "kama", "EUcomm2", "EUcomm1", "rai", "rspb", "smmt", "t_and_e", "uk_aa", "vda", "wwf")
colnames(rwmd_glove) = c("acea", "adts", "aegpl", "avele", "avere", "beuc", "bvrla", "ebb", "engva", "etrma", "etsc", "etuc", "faep", "fanc", "foe_uk", "greenpeace", "jama", "kama", "EUcomm2", "EUcomm1", "rai", "rspb", "smmt", "t_and_e", "uk_aa", "vda", "wwf")
final <- (t(rwmd_glove) + rwmd_glove)/2
save(final, file="final")
###visualization###
heatmap <- heatmap(final, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,10))
legend(x="bottomright", legend=c("similar", "dissimilar"),
fill=colorRampPalette(brewer.pal(8, "Spectral"))(3))
#basic statistics
max(as.numeric(unlist(final)))
median(as.numeric(unlist(final)))
min(as.numeric(unlist(final)))
mean(as.numeric(unlist(final)))
boxplot(as.numeric(unlist(final)))
#filter out most/least similar cases
library(dplyr)
list<-rwmd_glove %>%
as.table() %>% as.data.frame() %>%
subset(Var1 != Var2 & abs(Freq)<0.5) %>% # omit diagonal and keep significant correlations (optional...)
filter(!duplicated(paste0(pmax(as.character(Var1), as.character(Var2)), pmin(as.character(Var1), as.character(Var2))))) %>% # keep only unique occurrences, as.character because Var1 and Var2 are factors
arrange(Freq)
# use a Barnes-Hut t-Distributed Stochastic Neighbor Embedding algorithm to reduce the dimensionality to 2
#dimensions so that we can plot submissions against eachother:
library(Rtsne)
library(ggplot2)
library(ggrepel)
# Set seed:
set.seed(12345)
?Rtsne
# Generate the 2-dimenstional reduced embeddings:
?Rtsne
tsne <- Rtsne(final, perplexity= 3, pca = FALSE, is_distance = TRUE, dims =3)
# take the results and put them in a data frame for easy plotting:
results <- data.frame(names = rownames(final),
x = tsne$Y[,1],
y = tsne$Y[,2],
stringsAsFactors = FALSE)
ggplot(results, aes(x = x, y = y, label = names)) +
geom_point(color=custom.col, size=6) +
geom_text_repel()
# Compute k-means clustering with k = 2
k2 <- kmeans(final, centers = 4, nstart = 27)
cluster<-fviz_cluster(k2, data = final)
plot(cluster)
cluster
